"""
AN√ÅLISE DE DADOS DE E-COMMERCE COM DASH
=======================================

Este c√≥digo cria um painel interativo para an√°lise de dados de produtos de e-commerce.
Ele utiliza a biblioteca Dash (baseada em Flask) para criar uma aplica√ß√£o web com gr√°ficos interativos.

ESTRUTURA DO C√ìDIGO:
1. Importa√ß√µes de bibliotecas
2. Configura√ß√µes iniciais e carregamento de dados
3. Fun√ß√µes auxiliares para cria√ß√£o de gr√°ficos
4. Inicializa√ß√£o da aplica√ß√£o Dash
5. Defini√ß√£o do layout da interface
6. Callbacks para interatividade
7. Configura√ß√µes para deploy

Autor: [Seu Nome]
Data: [Data]
Vers√£o: 1.0
"""

# ==============================================
# 1. IMPORTA√á√ïES DE BIBLIOTECAS
# ==============================================

# Bibliotecas para manipula√ß√£o de arquivos e dados
import os  # Para opera√ß√µes com sistema de arquivos
import pandas as pd  # Para manipula√ß√£o de dados em DataFrames

# Bibliotecas para cria√ß√£o da aplica√ß√£o web e visualiza√ß√µes
import dash  # Framework principal
from dash import dcc, html  # Componentes de interface
from dash.dependencies import Input, Output  # Para interatividade
import plotly.express as px  # Para gr√°ficos de alto n√≠vel
import plotly.graph_objects as go  # Para gr√°ficos de baixo n√≠vel
from plotly.subplots import make_subplots  # Para gr√°ficos m√∫ltiplos

# ==============================================
# 2. CONFIGURA√á√ïES INICIAIS E CARREGAMENTO DE DADOS
# ==============================================

"""
ETAPAS DO PROCESSAMENTO DE DADOS:
1. Definir caminho para o arquivo CSV
2. Carregar os dados em um DataFrame
3. Converter colunas para tipos num√©ricos
4. Remover valores nulos
"""

# Caminho absoluto para o arquivo CSV (compat√≠vel com Render)
current_dir = os.path.dirname(__file__)  # Pega o diret√≥rio atual do script
csv_path = os.path.join(current_dir, 'ecommerce_estatistica.csv')  # Monta o caminho completo

try:
    # Carrega os dados do arquivo CSV
    df = pd.read_csv(csv_path)
    
    # Convers√£o de tipos num√©ricos (evita problemas com gr√°ficos)
    # 'errors=coerce' transforma valores inv√°lidos em NaN
    df['Pre√ßo'] = pd.to_numeric(df['Pre√ßo'], errors='coerce')
    df['Qtd_Vendidos'] = pd.to_numeric(df['Qtd_Vendidos'], errors='coerce')
    
    # Remove linhas com valores nulos nas colunas num√©ricas
    df = df.dropna(subset=['Pre√ßo', 'Qtd_Vendidos'])

except Exception as e:
    # Tratamento de erro robusto para evitar falhas na aplica√ß√£o
    print(f"Erro ao carregar dados: {e}")
    df = pd.DataFrame()  # Cria um DataFrame vazio para evitar erros

# ==============================================
# 3. FUN√á√ïES AUXILIARES PARA CRIA√á√ÉO DE GR√ÅFICOS
# ==============================================

def criar_histograma():
    """
    Cria um histograma mostrando a distribui√ß√£o dos pre√ßos dos produtos.
    
    Retorna:
        Figure: Objeto de figura do Plotly contendo o histograma
    """
    fig = px.histogram(
        df,
        x='Pre√ßo',  # Eixo X: pre√ßos dos produtos
        nbins=30,  # N√∫mero de intervalos (bins)
        title="Distribui√ß√£o dos Pre√ßos dos Produtos",
        labels={'Pre√ßo': 'Pre√ßo (R$)'},  # R√≥tulos personalizados
        color_discrete_sequence=['#636EFA'],  # Cor azul padr√£o
        template="plotly_white"  # Template de fundo branco
    )
    
    # Personaliza√ß√£o adicional do layout
    fig.update_layout(
        bargap=0.1,  # Espa√ßo entre as barras
        xaxis_title="Pre√ßo (R$)",  # T√≠tulo do eixo X
        yaxis_title="Quantidade de Produtos"  # T√≠tulo do eixo Y
    )
    return fig

def criar_dispersao():
    """
    Cria um gr√°fico de dispers√£o mostrando a rela√ß√£o entre pre√ßo, avalia√ß√µes e quantidade vendida.
    
    Retorna:
        Figure: Objeto de figura do Plotly contendo o gr√°fico de dispers√£o
    """
    fig = px.scatter(
        df,
        x='Pre√ßo',  # Eixo X: pre√ßo
        y='N_Avalia√ß√µes',  # Eixo Y: n√∫mero de avalia√ß√µes
        color='Qtd_Vendidos',  # Cor dos pontos: quantidade vendida
        title="Rela√ß√£o entre Pre√ßo, Avalia√ß√µes e Quantidade Vendida",
        labels={
            'Pre√ßo': 'Pre√ßo (R$)',
            'N_Avalia√ß√µes': 'N√∫mero de Avalia√ß√µes',
            'Qtd_Vendidos': 'Quantidade Vendida'
        },
        color_continuous_scale='Viridis'  # Escala de cores
    )
    
    # Personaliza√ß√£o do fundo do gr√°fico
    fig.update_layout(
        plot_bgcolor='rgba(240,240,240,0.8)',  # Cor de fundo do gr√°fico
        paper_bgcolor='rgba(240,240,240,0.5)'  # Cor de fundo ao redor do gr√°fico
    )
    return fig

def criar_heatmap():
    """
    Cria um mapa de calor mostrando as correla√ß√µes entre vari√°veis num√©ricas.
    
    Retorna:
        Figure: Objeto de figura do Plotly contendo o mapa de calor
    """
    # Seleciona apenas colunas num√©ricas
    numerical_df = df.select_dtypes(include=['float64', 'int64'])
    
    # Calcula a matriz de correla√ß√£o
    correlation_matrix = numerical_df.corr()

    fig = px.imshow(
        correlation_matrix,
        title="Mapa de Calor das Correla√ß√µes entre Vari√°veis Num√©ricas",
        color_continuous_scale='Blues',  # Escala de cores azuis
        text_auto=True,  # Mostra os valores nas c√©lulas
        aspect="auto"  # Ajuste autom√°tico de aspecto
    )
    
    # Personaliza√ß√£o dos eixos
    fig.update_layout(
        xaxis_title="Vari√°veis",
        yaxis_title="Vari√°veis"
    )
    return fig

def criar_barras():
    """
    Cria um gr√°fico de barras mostrando as marcas mais populares (top 7).
    
    Retorna:
        Figure: Objeto de figura do Plotly contendo o gr√°fico de barras
    """
    # Conta a frequ√™ncia de cada marca e pega as 7 mais comuns
    marcas = df['Marca'].value_counts().head(7)
    
    fig = px.bar(
        marcas,
        x=marcas.index,  # Eixo X: nomes das marcas
        y=marcas.values,  # Eixo Y: contagem de produtos
        title="Top 7 Marcas mais Populares",
        labels={'x': 'Marca', 'y': 'Quantidade de Produtos'},
        color=marcas.index,  # Cores baseadas nas marcas
        color_discrete_sequence=px.colors.qualitative.Pastel  # Cores pastel
    )
    
    # Remove a legenda (n√£o necess√°ria para este gr√°fico)
    fig.update_layout(showlegend=False)
    return fig

def criar_pizza():
    """
    Cria um gr√°fico de pizza mostrando a distribui√ß√£o de g√™neros (top 3).
    
    Retorna:
        Figure: Objeto de figura do Plotly contendo o gr√°fico de pizza
    """
    # Conta a frequ√™ncia de cada g√™nero e pega os 3 mais comuns
    generos = df['G√™nero'].value_counts().head(3)
    
    fig = px.pie(
        generos,
        values=generos.values,  # Valores: contagem
        names=generos.index,  # Nomes: g√™neros
        title="Distribui√ß√£o dos Produtos por G√™nero (Top 3)",
        hole=0.3,  # Cria um buraco no meio (gr√°fico de rosca)
        color_discrete_sequence=px.colors.qualitative.Set3  # Paleta de cores
    )
    return fig

def criar_densidade():
    """
    Cria um gr√°fico de densidade mostrando a distribui√ß√£o dos pre√ßos.
    
    Retorna:
        Figure: Objeto de figura do Plotly contendo o gr√°fico de densidade
    """
    fig = px.density_contour(
        df,
        x="Pre√ßo",
        title="Densidade dos Pre√ßos",
        color_discrete_sequence=['#00CC96']  # Cor verde
    )
    
    # Preenche as curvas de n√≠vel com cores
    fig.update_traces(contours_coloring="fill", contours_showlabels=True)
    
    # Personaliza√ß√£o dos eixos
    fig.update_layout(
        xaxis_title="Pre√ßo (R$)",
        yaxis_title="Densidade"
    )
    return fig

def criar_regressao():
    """
    Cria um gr√°fico de dispers√£o com linha de regress√£o linear.
    
    Retorna:
        Figure ou html.Div: Retorna o gr√°fico ou mensagem de erro se statsmodels n√£o estiver instalado
    """
    try:
        fig = px.scatter(
            df,
            x="Pre√ßo",
            y="Qtd_Vendidos",
            trendline="ols",  # Adiciona linha de regress√£o linear
            title="Regress√£o Linear: Pre√ßo vs Quantidade Vendida",
            labels={
                'Pre√ßo': 'Pre√ßo (R$)',
                'Qtd_Vendidos': 'Quantidade Vendida'
            },
            color_discrete_sequence=['#EF553B']  # Cor vermelha
        )
        
        # Personaliza√ß√£o do fundo
        fig.update_layout(
            plot_bgcolor='rgba(240,240,240,0.8)',
            paper_bgcolor='rgba(240,240,240,0.5)'
        )
        return fig
    except Exception as e:
        # Mensagem de erro amig√°vel se statsmodels n√£o estiver instalado
        return html.Div([
            html.H4("Erro ao gerar gr√°fico de regress√£o"),
            html.P("Por favor, instale a biblioteca statsmodels:"),
            html.Pre("pip install statsmodels"),
            html.P(f"Detalhes do erro: {str(e)}")
        ], style={'color': 'red', 'padding': '20px'})

# ==============================================
# 4. INICIALIZA√á√ÉO DA APLICA√á√ÉO DASH
# ==============================================

"""
CONFIGURA√á√ÉO DA APLICA√á√ÉO:
- __name__: Necess√°rio para o Dash identificar recursos est√°ticos
- external_stylesheets: Carrega uma folha de estilo CSS externa para melhor apar√™ncia
"""

app = dash.Dash(
    __name__, 
    external_stylesheets=['https://codepen.io/chriddyp/pen/bWLwgP.css']
)

# ==============================================
# 5. LAYOUT DA APLICA√á√ÉO
# ==============================================

"""
ESTRUTURA DA INTERFACE:
1. Cabe√ßalho com t√≠tulo
2. Linha com controles (dropdown) e informa√ß√µes
3. √Årea para exibi√ß√£o do gr√°fico selecionado

ESTILIZA√á√ÉO:
- Usa classes CSS do framework (como 'row', 'six columns')
- Estilos inline para personaliza√ß√£o espec√≠fica
"""

app.layout = html.Div([
    # Container principal com estilo
    html.Div([
        # T√≠tulo principal
        html.H1(
            "üìä Painel de An√°lise de E-commerce",
            style={
                'textAlign': 'center',
                'color': '#2a3f5f',
                'marginBottom': '30px',
                'fontFamily': 'Arial, sans-serif'
            }
        ),

        # Linha com controles e informa√ß√µes
        html.Div([
            # Coluna para o dropdown de sele√ß√£o
            html.Div([
                html.Label(
                    "Selecione o tipo de an√°lise:",
                    style={
                        'fontWeight': 'bold',
                        'marginBottom': '10px'
                    }
                ),
                dcc.Dropdown(
                    id='grafico-selecionado',
                    options=[
                        {'label': 'üìà Histograma de Pre√ßos', 'value': 'histograma'},
                        {'label': 'üü¢ Dispers√£o: Pre√ßo vs Avalia√ß√µes', 'value': 'dispersao'},
                        {'label': 'üî• Mapa de Calor de Correla√ß√µes', 'value': 'heatmap'},
                        {'label': 'üìä Barras: Marcas Populares', 'value': 'barras'},
                        {'label': 'üçï Pizza: Distribui√ß√£o de G√™neros', 'value': 'pizza'},
                        {'label': 'üåä Densidade de Pre√ßos', 'value': 'densidade'},
                        {'label': 'üìâ Regress√£o Linear (Pre√ßo vs Qtd Vendida)', 'value': 'regressao'}
                    ],
                    value='histograma',  # Valor padr√£o
                    clearable=False,  # N√£o permite limpar a sele√ß√£o
                    style={'width': '100%'}
                )
            ], className="six columns", style={'marginBottom': '30px'}),

            # Coluna para informa√ß√µes do dataset
            html.Div([
                html.Label(
                    "üìå Informa√ß√µes do Dataset:",
                    style={'fontWeight': 'bold'}
                ),
                html.Ul([
                    html.Li(f"Total de produtos: {len(df)}"),
                    html.Li(f"M√©dia de pre√ßo: R${df['Pre√ßo'].mean():.2f}"),
                    html.Li(f"Produto mais caro: R${df['Pre√ßo'].max():.2f}")
                ])
            ], className="six columns", style={'paddingLeft': '20px'})
        ], className="row"),  # row: organiza as colunas lado a lado

        # √Årea de exibi√ß√£o do gr√°fico
        html.Div(id='output-grafico', style={'marginTop': '20px'})
    ], style={
        'maxWidth': '1200px',
        'margin': '0 auto',
        'padding': '20px',
        'backgroundColor': 'white',
        'boxShadow': '0 2px 10px rgba(0,0,0,0.1)',
        'borderRadius': '5px'
    })
])

# ==============================================
# 6. CALLBACKS PARA INTERATIVIDADE
# ==============================================

"""
FUNCIONAMENTO DO CALLBACK:
1. O decorador @app.callback define a rela√ß√£o entre entrada e sa√≠da
2. Quando o dropdown (Input) muda, a fun√ß√£o √© acionada
3. A fun√ß√£o retorna o gr√°fico correspondente para a √°rea de exibi√ß√£o (Output)
"""

@app.callback(
    Output('output-grafico', 'children'),  # Sa√≠da: conte√∫do da div 'output-grafico'
    [Input('grafico-selecionado', 'value')]  # Entrada: valor do dropdown
)
def atualizar_grafico(grafico):
    """
    Atualiza o gr√°fico exibido com base na sele√ß√£o do usu√°rio.
    
    Par√¢metros:
        grafico (str): Valor do dropdown indicando qual gr√°fico mostrar
        
    Retorna:
        dcc.Graph ou html.Div: O gr√°fico selecionado ou mensagem de erro
    """
    # Verifica se o DataFrame est√° vazio (erro no carregamento)
    if df.empty:
        return html.Div("Erro: N√£o foi poss√≠vel carregar os dados.", style={'color': 'red'})

    # Dicion√°rio mapeando valores do dropdown para fun√ß√µes de gr√°fico
    graficos = {
        'histograma': criar_histograma,
        'dispersao': criar_dispersao,
        'heatmap': criar_heatmap,
        'barras': criar_barras,
        'pizza': criar_pizza,
        'densidade': criar_densidade,
        'regressao': criar_regressao
    }

    # Obt√©m a fun√ß√£o correspondente ao gr√°fico selecionado
    # Se n√£o existir, usa uma fun√ß√£o que retorna uma figura vazia
    figura = graficos.get(grafico, lambda: go.Figure())()

    # Se a fun√ß√£o retornar um componente HTML (como no caso de erro da regress√£o)
    if isinstance(figura, html.Div):
        return figura

    # Retorna o gr√°fico com estilos aplicados
    return dcc.Graph(
        figure=figura,
        style={
            'height': '600px',
            'border': '1px solid #eee',
            'borderRadius': '5px',
            'padding': '10px'
        }
    )

# ==============================================
# 7. CONFIGURA√á√ïES PARA DEPLOY
# ==============================================

"""
IMPORTANTE PARA DEPLOY NO RENDER:
- A vari√°vel 'server' √© necess√°ria para o Gunicorn identificar a aplica√ß√£o
- O bloco if __name__ √© usado para execu√ß√£o local
"""

# Esta linha √© essencial para o Gunicorn no Render
server = app.server

# Execu√ß√£o local (n√£o usado no Render)
if __name__ == '__main__':
    app.run_server(
        host='0.0.0.0',  # Permite acesso de qualquer IP
        port=8050,  # Porta padr√£o do Dash
        debug=True  # Modo debug para desenvolvimento
    )